class Nodo:
    def __init__(self, clave, valor):
        self.clave = clave
        self.valor = valor
        self.izquierdo = None
        self.derecho = None

class ArbolBinario:
    def __init__(self):
        self.raiz = None

    def insertar(self, clave, valor):
        if self.raiz is None:
            self.raiz = Nodo(clave, valor)
        else:
            self._insertar_rec(self.raiz, clave, valor)

    def _insertar_rec(self, nodo, clave, valor):
        if clave <= nodo.clave:  # Duplicados van al subárbol izquierdo
            if nodo.izquierdo is None:
                nodo.izquierdo = Nodo(clave, valor)
            else:
                self._insertar_rec(nodo.izquierdo, clave, valor)
        else:
            if nodo.derecho is None:
                nodo.derecho = Nodo(clave, valor)
            else:
                self._insertar_rec(nodo.derecho, clave, valor)

    def en_orden(self):
        return self._en_orden_rec(self.raiz)

    def _en_orden_rec(self, nodo):
        if nodo is None:
            return []
        return self._en_orden_rec(nodo.izquierdo) + [(nodo.clave, nodo.valor)] + self._en_orden_rec(nodo.derecho)

    def buscar_superficial(self, clave):
        return self._buscar_superficial_rec(self.raiz, clave)

    def _buscar_superficial_rec(self, nodo, clave):
        if nodo is None:
            return None
        if nodo.clave == clave:
            return nodo.valor
        if clave < nodo.clave:
            return self._buscar_superficial_rec(nodo.izquierdo, clave)
        else:
            return self._buscar_superficial_rec(nodo.derecho, clave)

    def buscar_profunda(self, clave):
        return self._buscar_profunda_rec(self.raiz, clave)

    def _buscar_profunda_rec(self, nodo, clave, resultado=None):
        if nodo is None:
            return resultado
        if nodo.clave == clave:
            resultado = nodo.valor
        resultado = self._buscar_profunda_rec(nodo.izquierdo, clave, resultado)
        return self._buscar_profunda_rec(nodo.derecho, clave, resultado)

    def eliminar(self, clave):
        self.raiz = self._eliminar_rec(self.raiz, clave)

    def _eliminar_rec(self, nodo, clave):
        if nodo is None:
            return None
        if clave == nodo.clave:
            if nodo.izquierdo is None and nodo.derecho is None:
                return None  # Nodo hoja
            if nodo.izquierdo is None:
                return nodo.derecho
            if nodo.derecho is None:
                return nodo.izquierdo
            # Nodo con dos hijos: buscar el sucesor in-order
            sucesor = self._minimo(nodo.derecho)
            nodo.clave, nodo.valor = sucesor.clave, sucesor.valor
            nodo.derecho = self._eliminar_rec(nodo.derecho, sucesor.clave)
        elif clave < nodo.clave:
            nodo.izquierdo = self._eliminar_rec(nodo.izquierdo, clave)
        else:
            nodo.derecho = self._eliminar_rec(nodo.derecho, clave)
        return nodo

    def _minimo(self, nodo):
        while nodo.izquierdo is not None:
            nodo = nodo.izquierdo
        return nodo


# Ejemplo de uso
arbol = ArbolBinario()
arbol.insertar(10, "A")
arbol.insertar(10, "B")
arbol.insertar(10, "C")
arbol.insertar(5, "E")
arbol.insertar(20, "D")

print("Árbol en orden:")
print(arbol.en_orden())

print("\nBuscar clave 10 (profunda):", arbol.buscar_profunda(10))
print("Buscar clave 10 (superficial):", arbol.buscar_superficial(10))

arbol.eliminar(10)
print("\nÁrbol en orden después de eliminar:")
print(arbol.en_orden())
